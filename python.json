{
	// Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	
	"if1 block": {
		"prefix": "if1",
		"body": [
			"#####################",
			"### $1",
			"if 1:",
			"\t$0",
		],
		"description": "if1 block"
	},

	"figure pre-settings": {
		"prefix": "figpresettings",
		"body": [
			"###########################",
			"### Figure pre-settings",
			"FS = 9",
			"mpl.rcParams.update({",
			"    'xtick.direction': 'in',",
			"    'ytick.direction': 'in',",
			"    'font.family': 'Times New Roman',",
			"    'font.size': FS,",
			"    'axes.titlesize': FS,",
			"    'axes.labelsize': FS,",
			"    'xtick.labelsize': FS,",
			"    'ytick.labelsize': FS,",
			"    'legend.fontsize': FS,",
			"    'figure.titlesize': FS,",
			"    'figure.dpi': 72,",
			"})",
			"",
			"def figsize_from_pt(width_pt, height_pt, dpi=72):",
			"    return (width_pt / dpi, height_pt / dpi)"
		],
		"description": "figure pre-settings"
	},

	"Standard imports and setup": {
		"prefix": "stdimport",
		"body": [
			"# %% import modules and libraries",
			"import os",
			"import sys",
			"import numpy as np",
			"import matplotlib as mpl",
			"import matplotlib.pyplot as plt",
			"import joblib",
			"import copy",
			"",
			"os.chdir(os.path.dirname(os.path.abspath(__file__)))",
			"sys.path.append('C:')",
			"from ykpylib import figio_recent as ykfigio",
			"from ykpylib import ykfunc_util as ykutil"
		],
		"description": "Standard import modules and libraries"
	},

	"fig and axes with shared axis": {
		"prefix": "figaxs",
		"body": [
			"fig, axs = plt.subplots(1, 2, sharex=True, sharey=True, figsize=figsize_from_pt(1200,600))",
			"for ax in axs.ravel(): ax.set_box_aspect(3 / 4)"
		],
		"description": "fig and axes with shared axis"
	},

	"section": {
		"prefix": "section",
		"body": [
			"################################",
			"# %% $1",
		],
		"description": "section"
	},

}